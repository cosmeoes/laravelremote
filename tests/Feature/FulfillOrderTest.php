<?php

namespace Tests\Feature;

use App\Billing\FakePaymentGateway;
use App\Billing\PaymentGateway;
use App\Mail\OrderCompletedEmail;
use App\Models\Order;
use Faker\Core\File;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Mail;
use Tests\TestCase;

class FulfillOrderTest extends TestCase
{
    use RefreshDatabase;

    protected $paymentGateway;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->paymentGateway = new FakePaymentGateway();
        $this->app->instance(PaymentGateway::class, $this->paymentGateway);
    }

    public function test_fulfills_order()
    {
        Mail::fake();
        $order = Order::factory()->create([
            'checkout_session' => 'test_checkout_session_id',
            'email' => 'joe.doe@company.com'
        ]);

        $response = $this->withHeader('Stripe-signature', $this->paymentGateway->getValidTestSignature($this->getPayload()))
            ->postJson(route('completed-order.store'), $this->getPostData([
                'type' => 'checkout.session.completed',
                'data' => [
                    'object' => [
                        'id' => 'test_checkout_session_id'
                    ]
                ]
            ]));
        $this->assertFalse($order->paid);

        $response->assertStatus(200);
        $this->assertTrue($order->refresh()->paid);
        $this->assertTrue($order->jobPost->visible);
        Mail::assertSent(OrderCompletedEmail::class, function (OrderCompletedEmail $mail) use ($order) {
            $this->assertTrue($order->is($mail->order));
            $mail->build();
            $this->assertEquals('joe.doe@company.com', $mail->to[0]['address']);
            return true;
        });
    }

    public function test_doesnt_fulfill_fulfilled_order()
    {
        Mail::fake();
        $order = Order::factory()->create([
            'checkout_session' => 'test_checkout_session_id',
            'email' => 'joe.doe@company.com',
            'paid' => true,
        ]);

        $response = $this->withHeader('Stripe-signature', $this->paymentGateway->getValidTestSignature($this->getPayload()))
            ->postJson(route('completed-order.store'), $this->getPostData([
                'data' => [
                    'object' => [
                        'id' => 'test_checkout_session_id'
                    ]
                ]
            ]));
        $this->assertTrue($order->paid);

        $response->assertStatus(422);
        Mail::assertNotQueued(OrderCompletedEmail::class);
    }

    public function test_doesnt_fulfil_non_existent_order()
    {
        Mail::fake();
        $response = $this->withHeader('Stripe-signature', $this->paymentGateway->getValidTestSignature($this->getPayload()))
            ->postJson(route('completed-order.store'), $this->getPostData());
        $response->assertStatus(404);
        Mail::assertNotQueued(OrderCompletedEmail::class);
    }

    public function test_doesnt_work_without_valid_signature()
    {
        Mail::fake();
        $order = Order::factory()->create([
            'checkout_session' => 'test_checkout_session_id',
            'email' => 'joe.doe@company.com'
        ]);

        $response = $this->withHeaders(["Stripe-Signature" => 'invalid-signature'])->postJson(route('completed-order.store'), $this->getPostData([
            'data' => [
                'object' => [
                    'id' => 'test_checkout_session_id'
                ]
            ]
        ]));

        $response->assertStatus(400);
        $this->assertFalse($order->refresh()->paid);
        Mail::assertNotQueued(OrderCompletedEmail::class);
    }

    public function test_only_fulfil_on_checkout_completed()
    {
        Mail::fake();
        $order = Order::factory()->create([
            'checkout_session' => 'test_checkout_session_id',
            'email' => 'joe.doe@company.com'
        ]);

        $response = $this->withHeader('Stripe-signature', $this->paymentGateway->getValidTestSignature($this->getPayload()))
            ->postJson(route('completed-order.store'), $this->getPostData([
                'type' => 'some other type',
                'data' => [
                    'object' => [
                        'id' => 'test_checkout_session_id'
                    ]
                ]
            ]));

        $response->assertStatus(200);
        $this->assertFalse($order->refresh()->paid);
        Mail::assertNotQueued(OrderCompletedEmail::class);
    }

    public function getPostData($overwrite = [])
    {
        return array_replace_recursive(
            json_decode(
                $this->getPayload(),
                true
            ), $overwrite
        );
    }

    public function getPayload()
    {
        return file_get_contents(__DIR__ . "/../Stubs/stripe-checkout-completed-event.json");
    }
}
